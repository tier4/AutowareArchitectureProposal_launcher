<?xml version="1.0" encoding="UTF-8"?>
<launch>

  <!-- Essential parameters -->
  <arg name="map_path" description="point cloud and lanelet2 map directory path"/>
  <arg name="vehicle_model" description="vehicle model name"/>
  <arg name="sensor_model" description="sensor model name"/>
  <arg name="vehicle_id" default="$(env VEHICLE_ID default)" description="vehicle specific ID"/>

  <!-- Optional parameters -->
  <arg name="vehicle" default="true" description="launch vehicle" />
  <arg name="map" default="true" description="launch map" />
  <arg name="sensing" default="false" description="launch sensing" />
  <arg name="localization" default="true" description="launch localization" />
  <arg name="perception" default="true" description="launch perception" />
  <arg name="planning" default="true" description="launch planning" />
  <arg name="control" default="true" description="launch control" />
  <arg name="rviz" default="true" description="launch rviz" />
  <arg name="lanelet2_map_file" default="lanelet2_map.osm" description="lanelet2 map file name"/>
  <arg name="pointcloud_map_file" default="pointcloud_map.pcd" description="pointcloud map file name"/>
  <arg name="vehicle_simulation" default="false" description="use vehicle simulation"/>
  <!-- Optional parameters for scenario simulation -->
  <arg name="scenario_simulation" default="false" description="use scenario simulation"/>

  <!-- Global parameters -->
  <include file="$(find-pkg-share autoware_global_parameter_loader)/launch/global_params.launch.py">
    <arg name="use_sim_time" value="true" />
    <arg name="vehicle_model" value="$(var vehicle_model)"/>
  </include>

  <!-- SVL specific -->
  <executable cmd="lgsvl_bridge" output="screen" />
  <include file="$(find-pkg-share lgsvl_interface)/launch/lgsvl.launch.py">
    <arg name="lgsvl_interface_param" value="$(find-pkg-share lgsvl_interface)/param/lgsvl.$(var vehicle_model).param.yaml" />
  </include>
  <node pkg="tf2_ros" exec="static_transform_publisher" args="0 0 0 0 0 0 base_link nav_base" />
  <node pkg="tf2_ros" exec="static_transform_publisher" args="0 0 0 0 0 0 base_link imu" />
  <node pkg="topic_tools" exec="relay" name="relay_lgsvl_clock" output="log" if="$(var use_sim_time)">
    <param name="input_topic" value="/lgsvl/clock" />
    <param name="output_topic" value="/clock" />
    <param name="type" value="rosgraph_msgs/msg/Clock" />
  </node>
  <node pkg="topic_tools" exec="relay" name="relay_lgsvl_odometry" output="log">
    <param name="input_topic" value="/lgsvl/gnss_odom" />
    <param name="output_topic" value="/localization/kinematic_state" />
    <param name="type" value="nav_msgs/msg/Odometry" />
  </node>
  <node pkg="topic_tools" exec="relay" name="relay_imu" output="log">
    <param name="input_topic" value="/imu/imu_raw" />
    <param name="output_topic" value="/sensing/imu/imu_data" />
    <param name="type" value="sensor_msgs/msg/Imu" />
  </node>
  <group unless="$(var localization)">
    <node pkg="tf2_ros" exec="static_transform_publisher" args="0 0 0 0 0 0 odom base_link" />
    <node pkg="tf2_ros" exec="static_transform_publisher" args="0 0 0 0 0 0 map odom" />
    <node pkg="lgsvl_ground_truth" exec="lgsvl_ground_truth_exe" />
  </group>


  <!-- Vehicle -->
  <group>
    <include file="$(find-pkg-share vehicle_launch)/launch/vehicle.launch.xml" if="$(var vehicle)">
      <arg name="vehicle_model" value="$(var vehicle_model)"/>
      <arg name="sensor_model" value="$(var sensor_model)"/>
      <arg name="vehicle_id" value="$(var vehicle_id)"/>
      <arg name="simulation" value="$(var vehicle_simulation)"/>
    </include>
  </group>

  <!-- Map -->
  <group>
    <include file="$(find-pkg-share map_launch)/launch/map.launch.py" if="$(var map)">
      <arg name="lanelet2_map_path" value="$(var map_path)/$(var lanelet2_map_file)" />
      <arg name="pointcloud_map_path" value="$(var map_path)/$(var pointcloud_map_file)"/>
    </include>
  </group>

  <!-- Sensing -->
  <group>
    <include file="$(find-pkg-share sensing_launch)/launch/sensing.launch.xml" if="$(var sensing)">
      <arg name="launch_driver" value="false"/>
      <arg name="sensor_model" value="$(var sensor_model)"/>
      <arg name="vehicle_param_file" value="$(find-pkg-share $(var vehicle_model)_description)/config/vehicle_info.param.yaml"/>
      <arg name="vehicle_mirror_param_file" value="$(find-pkg-share $(var vehicle_model)_description)/config/mirror.param.yaml"/>
    </include>
  </group>

  <!-- Custom pointcloud preprocessing for SVL. Only run if we do not use sensing and if we use either localization or perception -->
  <group unless="$(var sensing)">
    <include file="$(find-pkg-share $(var sensor_model)_launch)/launch/svl_pointcloud_preprocessor.launch.py" if="$(eval '\'$(var perception)\' == \'true\' or \'$(var localization)\' == \'true\'')">
      <arg name="vehicle_model" value="$(var vehicle_model)"/>
    </include>
  </group>
  <!-- Localization -->
  <include file="$(find-pkg-share localization_launch)/launch/localization.launch.xml" if="$(var localization)">
  </include>

  <!-- Perception -->
  <group>
    <include file="$(find-pkg-share perception_launch)/launch/perception.launch.xml" if="$(var perception)">
      <!-- options for mode: camera_lidar_fusion, lidar, camera -->
      <arg name="mode" value="lidar" />
      <arg name="vehicle_param_file" value="$(find-pkg-share $(var vehicle_model)_description)/config/vehicle_info.param.yaml"/>
    </include>
  </group>

  <!-- Planning -->
  <group>
    <include file="$(find-pkg-share planning_launch)/launch/planning.launch.xml" if="$(var planning)">
    </include>
  </group>

  <!-- Control -->
  <group>
    <include file="$(find-pkg-share control_launch)/launch/control.launch.py" if="$(var control)">
      <!-- options for lateral_controller_mode: mpc_follower, pure_pursuit -->
      <arg name="lateral_controller_mode" value="mpc_follower" />
    </include>
  </group>

  <!-- Rviz -->
  <node pkg="rviz2" exec="rviz2" name="rviz2" output="screen" args="-d $(find-pkg-share autoware_launch)/rviz/autoware.rviz -s $(find-pkg-share autoware_launch)/rviz/image/autoware.png" if="$(var rviz)">
  </node>

  <!-- Simulator (only runs to use ground truth localization)-->
  <include file="$(find-pkg-share simulator_launch)/launch/simulator.launch.xml" unless="$(var localization)">
    <arg name="scenario_simulation" value="$(var scenario_simulation)"/>
    <arg name="vehicle_simulation" value="false"/>
    <arg name="vehicle_model" value="$(var vehicle_model)"/>
  </include>
  <!-- TODO: without this planning does not work but this should not be necessary-->
  <node pkg="dummy_perception_publisher" exec="empty_objects_publisher" name="empty_objects_publisher" output="screen" if="$(var perception)">
    <remap from="~/output/objects" to="/perception/object_recognition/objects" />
  </node>
  <!-- Engage command -->
  <executable cmd="ros2 topic pub --rate 0.5 /autoware/engage autoware_auto_vehicle_msgs/msg/Engage '{engage: true}'" output="own_log" if="$(var control)" />
</launch>
